import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# 1. Load Stock Data
def load_stock_data(ticker, start_date, end_date):
    df = yf.download(ticker, start=start_date, end=end_date)
    return df[['Close']]

# 2. Preprocess Data
def preprocess_data(df, sequence_length):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(df)

    X, y = [], []
    for i in range(sequence_length, len(scaled_data)):
        X.append(scaled_data[i-sequence_length:i, 0])
        y.append(scaled_data[i, 0])
    
    X, y = np.array(X), np.array(y)
    X = X.reshape((X.shape[0], X.shape[1], 1))  # LSTM expects 3D input
    return X, y, scaler

# 3. Build the LSTM Model
def build_lstm_model(input_shape):
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=input_shape),
        LSTM(50),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# 4. Predict Future Prices
def predict_future(model, data, scaler, sequence_length, days_to_predict):
    prediction_list = data[-sequence_length:].tolist()

    for _ in range(days_to_predict):
        x_input = np.array(prediction_list[-sequence_length:])
        x_input = x_input.reshape((1, sequence_length, 1))
        next_pred = model.predict(x_input, verbose=0)
        prediction_list.append(next_pred[0])

    predicted_prices = scaler.inverse_transform(np.array(prediction_list[sequence_length:]))
    return predicted_prices

# --- Main Execution ---
if __name__ == "__main__":
    # Parameters
    ticker = 'AAPL'  # Apple stock
    start_date = '2018-01-01'
    end_date = '2024-12-31'
    sequence_length = 60
    days_to_predict = 30

    # Load and prepare data
    df = load_stock_data(ticker, start_date, end_date)
    X, y, scaler = preprocess_data(df, sequence_length)

    # Build and train model
    model = build_lstm_model((X.shape[1], 1))
    model.fit(X, y, epochs=10, batch_size=32)

    # Predict future prices
    last_data = scaler.transform(df)
    predictions = predict_future(model, last_data, scaler, sequence_length, days_to_predict)

    # Plotting the results
    plt.figure(figsize=(12, 6))
    plt.plot(df.index[-100:], scaler.inverse_transform(last_data[-100:]), label="Actual Prices")
    future_dates = pd.date_range(start=df.index[-1], periods=days_to_predict + 1, closed='right')
    plt.plot(future_dates, predictions, label="Predicted Prices", linestyle='--')
    plt.title(f"{ticker} Stock Price Prediction")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True)
    plt.show()
